diff --git a/3p-light-diagnostic.py b/3p-light-diagnostic.py
new file mode 100644
index 0000000..b0d8307
--- /dev/null
+++ b/3p-light-diagnostic.py
@@ -0,0 +1,140 @@
+#!/usr/bin/env python3
+"""
+LED Diagnostic Script
+This script helps diagnose common LED issues with Raspberry Pi GPIO
+"""
+import RPi.GPIO as GPIO
+import time
+
+# Pin definition
+PIN_LED = 23
+
+def check_gpio_setup():
+    """Check basic GPIO setup"""
+    print("=== GPIO Diagnostic ===")
+    
+    # Setup GPIO
+    GPIO.setmode(GPIO.BCM)
+    GPIO.setwarnings(False)
+    GPIO.setup(PIN_LED, GPIO.OUT)
+    
+    print(f"GPIO pin {PIN_LED} configured as output")
+    
+    # Test basic on/off
+    print("Testing basic digital output...")
+    print("  - Setting pin HIGH")
+    GPIO.output(PIN_LED, GPIO.HIGH)
+    time.sleep(2)
+    
+    print("  - Setting pin LOW")
+    GPIO.output(PIN_LED, GPIO.LOW)
+    time.sleep(1)
+    
+    print("Basic digital test complete")
+
+def test_pwm_frequencies():
+    """Test different PWM frequencies"""
+    print("\n=== PWM Frequency Test ===")
+    
+    frequencies = [100, 500, 1000, 2000, 5000]
+    
+    for freq in frequencies:
+        print(f"Testing PWM at {freq}Hz...")
+        pwm = GPIO.PWM(PIN_LED, freq)
+        pwm.start(0)
+        
+        # Ramp up to 100%
+        for duty in range(0, 101, 10):
+            pwm.ChangeDutyCycle(duty)
+            time.sleep(0.1)
+        
+        # Hold at 100% for observation
+        time.sleep(1)
+        
+        # Ramp down
+        for duty in range(100, -1, -10):
+            pwm.ChangeDutyCycle(duty)
+            time.sleep(0.1)
+        
+        pwm.stop()
+        time.sleep(0.5)
+
+def test_duty_cycles():
+    """Test specific duty cycles to identify brightness issues"""
+    print("\n=== Duty Cycle Test ===")
+    
+    pwm = GPIO.PWM(PIN_LED, 1000)
+    pwm.start(0)
+    
+    duty_cycles = [10, 25, 50, 75, 90, 100]
+    
+    for duty in duty_cycles:
+        print(f"  - Testing {duty}% duty cycle for 3 seconds")
+        pwm.ChangeDutyCycle(duty)
+        time.sleep(3)
+    
+    pwm.ChangeDutyCycle(0)
+    pwm.stop()
+
+def voltage_level_test():
+    """Simulate different voltage levels using PWM"""
+    print("\n=== Voltage Level Simulation ===")
+    print("This simulates different effective voltages using PWM")
+    
+    pwm = GPIO.PWM(PIN_LED, 1000)
+    pwm.start(0)
+    
+    # Test different "voltage" levels
+    voltage_levels = [
+        (25, "~0.8V equivalent"),
+        (50, "~1.6V equivalent"), 
+        (75, "~2.4V equivalent"),
+        (100, "~3.3V equivalent")
+    ]
+    
+    for duty, description in voltage_levels:
+        print(f"  - {description} ({duty}% duty)")
+        pwm.ChangeDutyCycle(duty)
+        time.sleep(3)
+    
+    pwm.ChangeDutyCycle(0)
+    pwm.stop()
+
+def main():
+    """Main diagnostic routine"""
+    print("LED Diagnostic Tool")
+    print("===================")
+    print("This will help diagnose LED brightness issues")
+    print("Watch your LED carefully during each test")
+    print("Press Ctrl+C to exit at any time\n")
+    
+    try:
+        # Basic GPIO test
+        check_gpio_setup()
+        
+        # PWM frequency test
+        test_pwm_frequencies()
+        
+        # Duty cycle test
+        test_duty_cycles()
+        
+        # Voltage level test
+        voltage_level_test()
+        
+        print("\n=== Diagnostic Complete ===")
+        print("If your LED is still dim, possible causes:")
+        print("1. LED module requires external power supply")
+        print("2. LED is designed for higher voltage (5V instead of 3.3V)")
+        print("3. Current limiting resistor is too high")
+        print("4. LED module is damaged")
+        print("5. Wiring issue (check connections)")
+        
+    except KeyboardInterrupt:
+        print("\nDiagnostic interrupted by user")
+    
+    finally:
+        GPIO.cleanup()
+        print("GPIO cleaned up")
+
+if __name__ == "__main__":
+    main()
diff --git a/3p-light-hardware-check.py b/3p-light-hardware-check.py
new file mode 100644
index 0000000..7382de3
--- /dev/null
+++ b/3p-light-hardware-check.py
@@ -0,0 +1,109 @@
+#!/usr/bin/env python3
+"""
+LED Wiring and Hardware Check
+Helps identify common hardware issues with LED modules
+"""
+import RPi.GPIO as GPIO
+import time
+
+# Pin definition
+PIN_LED = 23
+
+def basic_continuity_test():
+    """Test basic GPIO output functionality"""
+    print("=== Basic Continuity Test ===")
+    print("This test rapidly toggles the GPIO pin")
+    print("You should see the LED flickering if wiring is correct")
+    
+    GPIO.setmode(GPIO.BCM)
+    GPIO.setwarnings(False)
+    GPIO.setup(PIN_LED, GPIO.OUT)
+    
+    print("Starting rapid toggle test for 10 seconds...")
+    start_time = time.time()
+    
+    while time.time() - start_time < 10:
+        GPIO.output(PIN_LED, GPIO.HIGH)
+        time.sleep(0.1)
+        GPIO.output(PIN_LED, GPIO.LOW)
+        time.sleep(0.1)
+    
+    print("Rapid toggle test complete")
+
+def power_supply_test():
+    """Test if LED needs external power"""
+    print("\n=== Power Supply Test ===")
+    print("Testing if your LED module might need external power")
+    
+    pwm = GPIO.PWM(PIN_LED, 1000)
+    pwm.start(0)
+    
+    print("Setting LED to maximum brightness...")
+    pwm.ChangeDutyCycle(100)
+    
+    print("If LED is still very dim, it might need:")
+    print("- External 5V power supply")
+    print("- Higher current than GPIO pin can provide")
+    print("- Different wiring configuration")
+    
+    time.sleep(5)
+    pwm.stop()
+
+def led_type_identification():
+    """Help identify LED module type"""
+    print("\n=== LED Module Type Check ===")
+    print("Please check your LED module and answer these questions:")
+    print("1. Does it have 3 pins? (VCC, GND, Signal)")
+    print("2. Does it have built-in resistors?")
+    print("3. What voltage is it rated for? (3.3V or 5V)")
+    print("4. Is it a single LED or LED array?")
+    print("5. Does it have any markings or part numbers?")
+    print("\nCommon LED modules:")
+    print("- KY-016: 3-color RGB LED (needs 3 pins)")
+    print("- Basic LED: Single color, might need resistor")
+    print("- LED strip: Usually needs external power")
+    print("- High-power LED: Definitely needs external power")
+
+def troubleshooting_guide():
+    """Provide troubleshooting steps"""
+    print("\n=== Troubleshooting Guide ===")
+    print("If your LED is barely visible (red dot), try these solutions:")
+    print()
+    print("1. WIRING CHECK:")
+    print("   - LED+ (long leg) → GPIO23 (pin 16)")
+    print("   - LED- (short leg) → GND (pin 6, 9, 14, 20, 25, 30, 34, or 39)")
+    print("   - If using a module: VCC→3.3V, GND→GND, Signal→GPIO23")
+    print()
+    print("2. VOLTAGE ISSUES:")
+    print("   - Your LED might be designed for 5V instead of 3.3V")
+    print("   - Try connecting VCC to 5V pin (pin 2 or 4) instead of 3.3V")
+    print()
+    print("3. CURRENT LIMITING:")
+    print("   - If using bare LED, add 220Ω resistor in series")
+    print("   - If module has built-in resistor, it might be too high")
+    print()
+    print("4. LED ORIENTATION:")
+    print("   - Make sure LED is not inserted backwards")
+    print("   - Long leg (anode) should go to positive")
+    print()
+    print("5. EXTERNAL POWER:")
+    print("   - Some LED modules need external power supply")
+    print("   - Connect external 5V to VCC, common GND")
+
+def main():
+    print("LED Hardware Diagnostic")
+    print("======================")
+    
+    try:
+        basic_continuity_test()
+        power_supply_test()
+        led_type_identification()
+        troubleshooting_guide()
+        
+    except KeyboardInterrupt:
+        print("\nDiagnostic interrupted")
+    finally:
+        GPIO.cleanup()
+
+if __name__ == "__main__":
+    main()
diff --git a/3p-light.py b/3p-light.py
index 0ca9c5f..c939284 100644
--- a/3p-light.py
+++ b/3p-light.py
@@ -12,59 +12,96 @@ GPIO.setwarnings(False)
 # Configure pin as output
 GPIO.setup(PIN_LED, GPIO.OUT)
 
-# Initialize PWM at 100 Hz
-pwm_led = GPIO.PWM(PIN_LED, 100)
+# Initialize PWM at higher frequency for smoother operation
+# Increased from 100Hz to 1000Hz for better LED performance
+pwm_led = GPIO.PWM(PIN_LED, 1000)
 
 # Start PWM with 0% duty cycle (off)
 pwm_led.start(0)
 
-def blink_led(times=5, interval=0.5):
-    """Blink the LED a specified number of times"""
+def test_led_brightness():
+    """Test LED at different brightness levels"""
+    print("Testing LED brightness levels...")
+    
+    # Test at 25% brightness
+    print("  - 25% brightness")
+    pwm_led.ChangeDutyCycle(25)
+    time.sleep(2)
+    
+    # Test at 50% brightness
+    print("  - 50% brightness")
+    pwm_led.ChangeDutyCycle(50)
+    time.sleep(2)
+    
+    # Test at 75% brightness
+    print("  - 75% brightness")
+    pwm_led.ChangeDutyCycle(75)
+    time.sleep(2)
+    
+    # Test at 100% brightness
+    print("  - 100% brightness")
+    pwm_led.ChangeDutyCycle(100)
+    time.sleep(2)
+    
+    # Turn off
+    pwm_led.ChangeDutyCycle(0)
+
+def blink_led(times=5, interval=0.5, brightness=100):
+    """Blink the LED a specified number of times with adjustable brightness"""
     for _ in range(times):
-        GPIO.output(PIN_LED, GPIO.HIGH)
+        pwm_led.ChangeDutyCycle(brightness)
         time.sleep(interval)
-        GPIO.output(PIN_LED, GPIO.LOW)
+        pwm_led.ChangeDutyCycle(0)
         time.sleep(interval)
 
-def fade_led(duration=2.0, steps=100):
-    """Fade the LED smoothly from off to on and back to off"""
+def fade_led(duration=2.0, steps=100, max_brightness=100):
+    """Fade the LED smoothly from off to max brightness and back to off"""
+    step_delay = duration / (2 * steps)
+    
     # Fade up
-    for duty in range(0, 101, 1):
+    for i in range(steps + 1):
+        duty = int((i / steps) * max_brightness)
         pwm_led.ChangeDutyCycle(duty)
-        time.sleep(duration / (2 * steps))
+        time.sleep(step_delay)
     
     # Fade down
-    for duty in range(100, -1, -1):
+    for i in range(steps, -1, -1):
+        duty = int((i / steps) * max_brightness)
         pwm_led.ChangeDutyCycle(duty)
-        time.sleep(duration / (2 * steps))
+        time.sleep(step_delay)
 
 try:
-    print("Simple Single LED Module Demo")
+    print("Enhanced Single LED Module Demo")
     print("Press Ctrl+C to exit")
     
-    # Simple on/off demo
-    print("1. Turning LED on for 2 seconds...")
-    GPIO.output(PIN_LED, GPIO.HIGH)
-    time.sleep(2)
-    GPIO.output(PIN_LED, GPIO.LOW)
+    # Test brightness levels first
+    print("1. Testing LED brightness levels...")
+    test_led_brightness()
+    time.sleep(1)
+    
+    # Simple on/off demo at full brightness
+    print("2. Full brightness test for 3 seconds...")
+    pwm_led.ChangeDutyCycle(100)
+    time.sleep(3)
+    pwm_led.ChangeDutyCycle(0)
     time.sleep(1)
     
-    # Blinking demo
-    print("2. Blinking LED...")
-    blink_led(times=5, interval=0.3)
+    # Blinking demo with full brightness
+    print("3. Blinking LED at full brightness...")
+    blink_led(times=5, interval=0.3, brightness=100)
     time.sleep(1)
     
     # PWM fading demo
-    print("3. Fading the LED...")
-    fade_led(duration=3.0)
+    print("4. Fading the LED...")
+    fade_led(duration=3.0, max_brightness=100)
     time.sleep(1)
     
     # Loop through all patterns
-    print("4. Continuous demo loop... (Press Ctrl+C to exit)")
+    print("5. Continuous demo loop... (Press Ctrl+C to exit)")
     while True:
-        blink_led(times=3, interval=0.2)
+        blink_led(times=3, interval=0.2, brightness=100)
         time.sleep(0.5)
-        fade_led(duration=2.0)
+        fade_led(duration=2.0, max_brightness=100)
         time.sleep(0.5)
 
 except KeyboardInterrupt:
